// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Taskhud.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Taskhud_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Taskhud_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Taskhud_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Taskhud_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Taskhud_2eproto;
namespace mq {
namespace proto {
namespace taskhud {
class Objective;
struct ObjectiveDefaultTypeInternal;
extern ObjectiveDefaultTypeInternal _Objective_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskHud;
struct TaskHudDefaultTypeInternal;
extern TaskHudDefaultTypeInternal _TaskHud_default_instance_;
class TaskTable;
struct TaskTableDefaultTypeInternal;
extern TaskTableDefaultTypeInternal _TaskTable_default_instance_;
}  // namespace taskhud
}  // namespace proto
}  // namespace mq
PROTOBUF_NAMESPACE_OPEN
template<> ::mq::proto::taskhud::Objective* Arena::CreateMaybeMessage<::mq::proto::taskhud::Objective>(Arena*);
template<> ::mq::proto::taskhud::Task* Arena::CreateMaybeMessage<::mq::proto::taskhud::Task>(Arena*);
template<> ::mq::proto::taskhud::TaskHud* Arena::CreateMaybeMessage<::mq::proto::taskhud::TaskHud>(Arena*);
template<> ::mq::proto::taskhud::TaskTable* Arena::CreateMaybeMessage<::mq::proto::taskhud::TaskTable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mq {
namespace proto {
namespace taskhud {

enum MessageId : int {
  Request = 0,
  Incoming = 1,
  MessageId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageId_IsValid(int value);
constexpr MessageId MessageId_MIN = Request;
constexpr MessageId MessageId_MAX = Incoming;
constexpr int MessageId_ARRAYSIZE = MessageId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageId_descriptor();
template<typename T>
inline const std::string& MessageId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageId_descriptor(), enum_t_value);
}
inline bool MessageId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageId>(
    MessageId_descriptor(), name, value);
}
// ===================================================================

class TaskHud final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mq.proto.taskhud.TaskHud) */ {
 public:
  inline TaskHud() : TaskHud(nullptr) {}
  ~TaskHud() override;
  explicit PROTOBUF_CONSTEXPR TaskHud(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskHud(const TaskHud& from);
  TaskHud(TaskHud&& from) noexcept
    : TaskHud() {
    *this = ::std::move(from);
  }

  inline TaskHud& operator=(const TaskHud& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskHud& operator=(TaskHud&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskHud& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskHud* internal_default_instance() {
    return reinterpret_cast<const TaskHud*>(
               &_TaskHud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskHud& a, TaskHud& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskHud* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskHud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskHud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskHud>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskHud& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskHud& from) {
    TaskHud::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskHud* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mq.proto.taskhud.TaskHud";
  }
  protected:
  explicit TaskHud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskTableFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .mq.proto.taskhud.TaskTable TaskTable = 2;
  bool has_tasktable() const;
  private:
  bool _internal_has_tasktable() const;
  public:
  void clear_tasktable();
  const ::mq::proto::taskhud::TaskTable& tasktable() const;
  PROTOBUF_NODISCARD ::mq::proto::taskhud::TaskTable* release_tasktable();
  ::mq::proto::taskhud::TaskTable* mutable_tasktable();
  void set_allocated_tasktable(::mq::proto::taskhud::TaskTable* tasktable);
  private:
  const ::mq::proto::taskhud::TaskTable& _internal_tasktable() const;
  ::mq::proto::taskhud::TaskTable* _internal_mutable_tasktable();
  public:
  void unsafe_arena_set_allocated_tasktable(
      ::mq::proto::taskhud::TaskTable* tasktable);
  ::mq::proto::taskhud::TaskTable* unsafe_arena_release_tasktable();

  // .mq.proto.taskhud.MessageId id = 1;
  void clear_id();
  ::mq::proto::taskhud::MessageId id() const;
  void set_id(::mq::proto::taskhud::MessageId value);
  private:
  ::mq::proto::taskhud::MessageId _internal_id() const;
  void _internal_set_id(::mq::proto::taskhud::MessageId value);
  public:

  // @@protoc_insertion_point(class_scope:mq.proto.taskhud.TaskHud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::mq::proto::taskhud::TaskTable* tasktable_;
    int id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Taskhud_2eproto;
};
// -------------------------------------------------------------------

class Objective final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mq.proto.taskhud.Objective) */ {
 public:
  inline Objective() : Objective(nullptr) {}
  ~Objective() override;
  explicit PROTOBUF_CONSTEXPR Objective(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Objective(const Objective& from);
  Objective(Objective&& from) noexcept
    : Objective() {
    *this = ::std::move(from);
  }

  inline Objective& operator=(const Objective& from) {
    CopyFrom(from);
    return *this;
  }
  inline Objective& operator=(Objective&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Objective& default_instance() {
    return *internal_default_instance();
  }
  static inline const Objective* internal_default_instance() {
    return reinterpret_cast<const Objective*>(
               &_Objective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Objective& a, Objective& b) {
    a.Swap(&b);
  }
  inline void Swap(Objective* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Objective* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Objective* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Objective>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Objective& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Objective& from) {
    Objective::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Objective* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mq.proto.taskhud.Objective";
  }
  protected:
  explicit Objective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectiveTextFieldNumber = 1,
    kIsCompletedFieldNumber = 2,
    kProgressFieldNumber = 3,
    kObjIndexFieldNumber = 4,
  };
  // string objectiveText = 1;
  void clear_objectivetext();
  const std::string& objectivetext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objectivetext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objectivetext();
  PROTOBUF_NODISCARD std::string* release_objectivetext();
  void set_allocated_objectivetext(std::string* objectivetext);
  private:
  const std::string& _internal_objectivetext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objectivetext(const std::string& value);
  std::string* _internal_mutable_objectivetext();
  public:

  // bool isCompleted = 2;
  void clear_iscompleted();
  bool iscompleted() const;
  void set_iscompleted(bool value);
  private:
  bool _internal_iscompleted() const;
  void _internal_set_iscompleted(bool value);
  public:

  // int32 progress = 3;
  void clear_progress();
  int32_t progress() const;
  void set_progress(int32_t value);
  private:
  int32_t _internal_progress() const;
  void _internal_set_progress(int32_t value);
  public:

  // int32 objIndex = 4;
  void clear_objindex();
  int32_t objindex() const;
  void set_objindex(int32_t value);
  private:
  int32_t _internal_objindex() const;
  void _internal_set_objindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mq.proto.taskhud.Objective)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectivetext_;
    bool iscompleted_;
    int32_t progress_;
    int32_t objindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Taskhud_2eproto;
};
// -------------------------------------------------------------------

class Task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mq.proto.taskhud.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  explicit PROTOBUF_CONSTEXPR Task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Task& from) {
    Task::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mq.proto.taskhud.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectivesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .mq.proto.taskhud.Objective objectives = 2;
  int objectives_size() const;
  private:
  int _internal_objectives_size() const;
  public:
  void clear_objectives();
  ::mq::proto::taskhud::Objective* mutable_objectives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mq::proto::taskhud::Objective >*
      mutable_objectives();
  private:
  const ::mq::proto::taskhud::Objective& _internal_objectives(int index) const;
  ::mq::proto::taskhud::Objective* _internal_add_objectives();
  public:
  const ::mq::proto::taskhud::Objective& objectives(int index) const;
  ::mq::proto::taskhud::Objective* add_objectives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mq::proto::taskhud::Objective >&
      objectives() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:mq.proto.taskhud.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mq::proto::taskhud::Objective > objectives_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Taskhud_2eproto;
};
// -------------------------------------------------------------------

class TaskTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mq.proto.taskhud.TaskTable) */ {
 public:
  inline TaskTable() : TaskTable(nullptr) {}
  ~TaskTable() override;
  explicit PROTOBUF_CONSTEXPR TaskTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskTable(const TaskTable& from);
  TaskTable(TaskTable&& from) noexcept
    : TaskTable() {
    *this = ::std::move(from);
  }

  inline TaskTable& operator=(const TaskTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskTable& operator=(TaskTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskTable* internal_default_instance() {
    return reinterpret_cast<const TaskTable*>(
               &_TaskTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskTable& a, TaskTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskTable& from) {
    TaskTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mq.proto.taskhud.TaskTable";
  }
  protected:
  explicit TaskTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kCharacterFieldNumber = 1,
  };
  // repeated .mq.proto.taskhud.Task tasks = 2;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::mq::proto::taskhud::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mq::proto::taskhud::Task >*
      mutable_tasks();
  private:
  const ::mq::proto::taskhud::Task& _internal_tasks(int index) const;
  ::mq::proto::taskhud::Task* _internal_add_tasks();
  public:
  const ::mq::proto::taskhud::Task& tasks(int index) const;
  ::mq::proto::taskhud::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mq::proto::taskhud::Task >&
      tasks() const;

  // string character = 1;
  void clear_character();
  const std::string& character() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character();
  PROTOBUF_NODISCARD std::string* release_character();
  void set_allocated_character(std::string* character);
  private:
  const std::string& _internal_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character(const std::string& value);
  std::string* _internal_mutable_character();
  public:

  // @@protoc_insertion_point(class_scope:mq.proto.taskhud.TaskTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mq::proto::taskhud::Task > tasks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Taskhud_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskHud

// .mq.proto.taskhud.MessageId id = 1;
inline void TaskHud::clear_id() {
  _impl_.id_ = 0;
}
inline ::mq::proto::taskhud::MessageId TaskHud::_internal_id() const {
  return static_cast< ::mq::proto::taskhud::MessageId >(_impl_.id_);
}
inline ::mq::proto::taskhud::MessageId TaskHud::id() const {
  // @@protoc_insertion_point(field_get:mq.proto.taskhud.TaskHud.id)
  return _internal_id();
}
inline void TaskHud::_internal_set_id(::mq::proto::taskhud::MessageId value) {
  
  _impl_.id_ = value;
}
inline void TaskHud::set_id(::mq::proto::taskhud::MessageId value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mq.proto.taskhud.TaskHud.id)
}

// optional .mq.proto.taskhud.TaskTable TaskTable = 2;
inline bool TaskHud::_internal_has_tasktable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tasktable_ != nullptr);
  return value;
}
inline bool TaskHud::has_tasktable() const {
  return _internal_has_tasktable();
}
inline void TaskHud::clear_tasktable() {
  if (_impl_.tasktable_ != nullptr) _impl_.tasktable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mq::proto::taskhud::TaskTable& TaskHud::_internal_tasktable() const {
  const ::mq::proto::taskhud::TaskTable* p = _impl_.tasktable_;
  return p != nullptr ? *p : reinterpret_cast<const ::mq::proto::taskhud::TaskTable&>(
      ::mq::proto::taskhud::_TaskTable_default_instance_);
}
inline const ::mq::proto::taskhud::TaskTable& TaskHud::tasktable() const {
  // @@protoc_insertion_point(field_get:mq.proto.taskhud.TaskHud.TaskTable)
  return _internal_tasktable();
}
inline void TaskHud::unsafe_arena_set_allocated_tasktable(
    ::mq::proto::taskhud::TaskTable* tasktable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tasktable_);
  }
  _impl_.tasktable_ = tasktable;
  if (tasktable) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mq.proto.taskhud.TaskHud.TaskTable)
}
inline ::mq::proto::taskhud::TaskTable* TaskHud::release_tasktable() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mq::proto::taskhud::TaskTable* temp = _impl_.tasktable_;
  _impl_.tasktable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mq::proto::taskhud::TaskTable* TaskHud::unsafe_arena_release_tasktable() {
  // @@protoc_insertion_point(field_release:mq.proto.taskhud.TaskHud.TaskTable)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mq::proto::taskhud::TaskTable* temp = _impl_.tasktable_;
  _impl_.tasktable_ = nullptr;
  return temp;
}
inline ::mq::proto::taskhud::TaskTable* TaskHud::_internal_mutable_tasktable() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tasktable_ == nullptr) {
    auto* p = CreateMaybeMessage<::mq::proto::taskhud::TaskTable>(GetArenaForAllocation());
    _impl_.tasktable_ = p;
  }
  return _impl_.tasktable_;
}
inline ::mq::proto::taskhud::TaskTable* TaskHud::mutable_tasktable() {
  ::mq::proto::taskhud::TaskTable* _msg = _internal_mutable_tasktable();
  // @@protoc_insertion_point(field_mutable:mq.proto.taskhud.TaskHud.TaskTable)
  return _msg;
}
inline void TaskHud::set_allocated_tasktable(::mq::proto::taskhud::TaskTable* tasktable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tasktable_;
  }
  if (tasktable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tasktable);
    if (message_arena != submessage_arena) {
      tasktable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tasktable, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tasktable_ = tasktable;
  // @@protoc_insertion_point(field_set_allocated:mq.proto.taskhud.TaskHud.TaskTable)
}

// -------------------------------------------------------------------

// Objective

// string objectiveText = 1;
inline void Objective::clear_objectivetext() {
  _impl_.objectivetext_.ClearToEmpty();
}
inline const std::string& Objective::objectivetext() const {
  // @@protoc_insertion_point(field_get:mq.proto.taskhud.Objective.objectiveText)
  return _internal_objectivetext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Objective::set_objectivetext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.objectivetext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mq.proto.taskhud.Objective.objectiveText)
}
inline std::string* Objective::mutable_objectivetext() {
  std::string* _s = _internal_mutable_objectivetext();
  // @@protoc_insertion_point(field_mutable:mq.proto.taskhud.Objective.objectiveText)
  return _s;
}
inline const std::string& Objective::_internal_objectivetext() const {
  return _impl_.objectivetext_.Get();
}
inline void Objective::_internal_set_objectivetext(const std::string& value) {
  
  _impl_.objectivetext_.Set(value, GetArenaForAllocation());
}
inline std::string* Objective::_internal_mutable_objectivetext() {
  
  return _impl_.objectivetext_.Mutable(GetArenaForAllocation());
}
inline std::string* Objective::release_objectivetext() {
  // @@protoc_insertion_point(field_release:mq.proto.taskhud.Objective.objectiveText)
  return _impl_.objectivetext_.Release();
}
inline void Objective::set_allocated_objectivetext(std::string* objectivetext) {
  if (objectivetext != nullptr) {
    
  } else {
    
  }
  _impl_.objectivetext_.SetAllocated(objectivetext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.objectivetext_.IsDefault()) {
    _impl_.objectivetext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mq.proto.taskhud.Objective.objectiveText)
}

// bool isCompleted = 2;
inline void Objective::clear_iscompleted() {
  _impl_.iscompleted_ = false;
}
inline bool Objective::_internal_iscompleted() const {
  return _impl_.iscompleted_;
}
inline bool Objective::iscompleted() const {
  // @@protoc_insertion_point(field_get:mq.proto.taskhud.Objective.isCompleted)
  return _internal_iscompleted();
}
inline void Objective::_internal_set_iscompleted(bool value) {
  
  _impl_.iscompleted_ = value;
}
inline void Objective::set_iscompleted(bool value) {
  _internal_set_iscompleted(value);
  // @@protoc_insertion_point(field_set:mq.proto.taskhud.Objective.isCompleted)
}

// int32 progress = 3;
inline void Objective::clear_progress() {
  _impl_.progress_ = 0;
}
inline int32_t Objective::_internal_progress() const {
  return _impl_.progress_;
}
inline int32_t Objective::progress() const {
  // @@protoc_insertion_point(field_get:mq.proto.taskhud.Objective.progress)
  return _internal_progress();
}
inline void Objective::_internal_set_progress(int32_t value) {
  
  _impl_.progress_ = value;
}
inline void Objective::set_progress(int32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:mq.proto.taskhud.Objective.progress)
}

// int32 objIndex = 4;
inline void Objective::clear_objindex() {
  _impl_.objindex_ = 0;
}
inline int32_t Objective::_internal_objindex() const {
  return _impl_.objindex_;
}
inline int32_t Objective::objindex() const {
  // @@protoc_insertion_point(field_get:mq.proto.taskhud.Objective.objIndex)
  return _internal_objindex();
}
inline void Objective::_internal_set_objindex(int32_t value) {
  
  _impl_.objindex_ = value;
}
inline void Objective::set_objindex(int32_t value) {
  _internal_set_objindex(value);
  // @@protoc_insertion_point(field_set:mq.proto.taskhud.Objective.objIndex)
}

// -------------------------------------------------------------------

// Task

// string name = 1;
inline void Task::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Task::name() const {
  // @@protoc_insertion_point(field_get:mq.proto.taskhud.Task.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mq.proto.taskhud.Task.name)
}
inline std::string* Task::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mq.proto.taskhud.Task.name)
  return _s;
}
inline const std::string& Task::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Task::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Task::release_name() {
  // @@protoc_insertion_point(field_release:mq.proto.taskhud.Task.name)
  return _impl_.name_.Release();
}
inline void Task::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mq.proto.taskhud.Task.name)
}

// repeated .mq.proto.taskhud.Objective objectives = 2;
inline int Task::_internal_objectives_size() const {
  return _impl_.objectives_.size();
}
inline int Task::objectives_size() const {
  return _internal_objectives_size();
}
inline void Task::clear_objectives() {
  _impl_.objectives_.Clear();
}
inline ::mq::proto::taskhud::Objective* Task::mutable_objectives(int index) {
  // @@protoc_insertion_point(field_mutable:mq.proto.taskhud.Task.objectives)
  return _impl_.objectives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mq::proto::taskhud::Objective >*
Task::mutable_objectives() {
  // @@protoc_insertion_point(field_mutable_list:mq.proto.taskhud.Task.objectives)
  return &_impl_.objectives_;
}
inline const ::mq::proto::taskhud::Objective& Task::_internal_objectives(int index) const {
  return _impl_.objectives_.Get(index);
}
inline const ::mq::proto::taskhud::Objective& Task::objectives(int index) const {
  // @@protoc_insertion_point(field_get:mq.proto.taskhud.Task.objectives)
  return _internal_objectives(index);
}
inline ::mq::proto::taskhud::Objective* Task::_internal_add_objectives() {
  return _impl_.objectives_.Add();
}
inline ::mq::proto::taskhud::Objective* Task::add_objectives() {
  ::mq::proto::taskhud::Objective* _add = _internal_add_objectives();
  // @@protoc_insertion_point(field_add:mq.proto.taskhud.Task.objectives)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mq::proto::taskhud::Objective >&
Task::objectives() const {
  // @@protoc_insertion_point(field_list:mq.proto.taskhud.Task.objectives)
  return _impl_.objectives_;
}

// -------------------------------------------------------------------

// TaskTable

// string character = 1;
inline void TaskTable::clear_character() {
  _impl_.character_.ClearToEmpty();
}
inline const std::string& TaskTable::character() const {
  // @@protoc_insertion_point(field_get:mq.proto.taskhud.TaskTable.character)
  return _internal_character();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskTable::set_character(ArgT0&& arg0, ArgT... args) {
 
 _impl_.character_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mq.proto.taskhud.TaskTable.character)
}
inline std::string* TaskTable::mutable_character() {
  std::string* _s = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:mq.proto.taskhud.TaskTable.character)
  return _s;
}
inline const std::string& TaskTable::_internal_character() const {
  return _impl_.character_.Get();
}
inline void TaskTable::_internal_set_character(const std::string& value) {
  
  _impl_.character_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskTable::_internal_mutable_character() {
  
  return _impl_.character_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskTable::release_character() {
  // @@protoc_insertion_point(field_release:mq.proto.taskhud.TaskTable.character)
  return _impl_.character_.Release();
}
inline void TaskTable::set_allocated_character(std::string* character) {
  if (character != nullptr) {
    
  } else {
    
  }
  _impl_.character_.SetAllocated(character, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.character_.IsDefault()) {
    _impl_.character_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mq.proto.taskhud.TaskTable.character)
}

// repeated .mq.proto.taskhud.Task tasks = 2;
inline int TaskTable::_internal_tasks_size() const {
  return _impl_.tasks_.size();
}
inline int TaskTable::tasks_size() const {
  return _internal_tasks_size();
}
inline void TaskTable::clear_tasks() {
  _impl_.tasks_.Clear();
}
inline ::mq::proto::taskhud::Task* TaskTable::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:mq.proto.taskhud.TaskTable.tasks)
  return _impl_.tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mq::proto::taskhud::Task >*
TaskTable::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:mq.proto.taskhud.TaskTable.tasks)
  return &_impl_.tasks_;
}
inline const ::mq::proto::taskhud::Task& TaskTable::_internal_tasks(int index) const {
  return _impl_.tasks_.Get(index);
}
inline const ::mq::proto::taskhud::Task& TaskTable::tasks(int index) const {
  // @@protoc_insertion_point(field_get:mq.proto.taskhud.TaskTable.tasks)
  return _internal_tasks(index);
}
inline ::mq::proto::taskhud::Task* TaskTable::_internal_add_tasks() {
  return _impl_.tasks_.Add();
}
inline ::mq::proto::taskhud::Task* TaskTable::add_tasks() {
  ::mq::proto::taskhud::Task* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:mq.proto.taskhud.TaskTable.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mq::proto::taskhud::Task >&
TaskTable::tasks() const {
  // @@protoc_insertion_point(field_list:mq.proto.taskhud.TaskTable.tasks)
  return _impl_.tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace taskhud
}  // namespace proto
}  // namespace mq

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mq::proto::taskhud::MessageId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mq::proto::taskhud::MessageId>() {
  return ::mq::proto::taskhud::MessageId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Taskhud_2eproto
