// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Taskhud.proto

#include "Taskhud.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mq {
namespace proto {
namespace taskhud {
PROTOBUF_CONSTEXPR TaskHud::TaskHud(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tasktable_)*/nullptr
  , /*decltype(_impl_.id_)*/0} {}
struct TaskHudDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskHudDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskHudDefaultTypeInternal() {}
  union {
    TaskHud _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskHudDefaultTypeInternal _TaskHud_default_instance_;
PROTOBUF_CONSTEXPR Objective::Objective(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectivetext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iscompleted_)*/false
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_.objindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectiveDefaultTypeInternal() {}
  union {
    Objective _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectiveDefaultTypeInternal _Objective_default_instance_;
PROTOBUF_CONSTEXPR Task::Task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectives_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;
PROTOBUF_CONSTEXPR TaskTable::TaskTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_.character_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskTableDefaultTypeInternal() {}
  union {
    TaskTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskTableDefaultTypeInternal _TaskTable_default_instance_;
}  // namespace taskhud
}  // namespace proto
}  // namespace mq
static ::_pb::Metadata file_level_metadata_Taskhud_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Taskhud_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Taskhud_2eproto = nullptr;

const uint32_t TableStruct_Taskhud_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::TaskHud, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::TaskHud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::TaskHud, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::TaskHud, _impl_.tasktable_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::Objective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::Objective, _impl_.objectivetext_),
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::Objective, _impl_.iscompleted_),
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::Objective, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::Objective, _impl_.objindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::Task, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::Task, _impl_.objectives_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::TaskTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::TaskTable, _impl_.character_),
  PROTOBUF_FIELD_OFFSET(::mq::proto::taskhud::TaskTable, _impl_.tasks_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::mq::proto::taskhud::TaskHud)},
  { 10, -1, -1, sizeof(::mq::proto::taskhud::Objective)},
  { 20, -1, -1, sizeof(::mq::proto::taskhud::Task)},
  { 28, -1, -1, sizeof(::mq::proto::taskhud::TaskTable)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mq::proto::taskhud::_TaskHud_default_instance_._instance,
  &::mq::proto::taskhud::_Objective_default_instance_._instance,
  &::mq::proto::taskhud::_Task_default_instance_._instance,
  &::mq::proto::taskhud::_TaskTable_default_instance_._instance,
};

const char descriptor_table_protodef_Taskhud_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rTaskhud.proto\022\020mq.proto.taskhud\"u\n\007Tas"
  "kHud\022\'\n\002id\030\001 \001(\0162\033.mq.proto.taskhud.Mess"
  "ageId\0223\n\tTaskTable\030\002 \001(\0132\033.mq.proto.task"
  "hud.TaskTableH\000\210\001\001B\014\n\n_TaskTable\"[\n\tObje"
  "ctive\022\025\n\robjectiveText\030\001 \001(\t\022\023\n\013isComple"
  "ted\030\002 \001(\010\022\020\n\010progress\030\003 \001(\005\022\020\n\010objIndex\030"
  "\004 \001(\005\"E\n\004Task\022\014\n\004name\030\001 \001(\t\022/\n\nobjective"
  "s\030\002 \003(\0132\033.mq.proto.taskhud.Objective\"E\n\t"
  "TaskTable\022\021\n\tcharacter\030\001 \001(\t\022%\n\005tasks\030\002 "
  "\003(\0132\026.mq.proto.taskhud.Task*&\n\tMessageId"
  "\022\013\n\007Request\020\000\022\014\n\010Incoming\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Taskhud_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Taskhud_2eproto = {
    false, false, 435, descriptor_table_protodef_Taskhud_2eproto,
    "Taskhud.proto",
    &descriptor_table_Taskhud_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_Taskhud_2eproto::offsets,
    file_level_metadata_Taskhud_2eproto, file_level_enum_descriptors_Taskhud_2eproto,
    file_level_service_descriptors_Taskhud_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Taskhud_2eproto_getter() {
  return &descriptor_table_Taskhud_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Taskhud_2eproto(&descriptor_table_Taskhud_2eproto);
namespace mq {
namespace proto {
namespace taskhud {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Taskhud_2eproto);
  return file_level_enum_descriptors_Taskhud_2eproto[0];
}
bool MessageId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TaskHud::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskHud>()._impl_._has_bits_);
  static const ::mq::proto::taskhud::TaskTable& tasktable(const TaskHud* msg);
  static void set_has_tasktable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mq::proto::taskhud::TaskTable&
TaskHud::_Internal::tasktable(const TaskHud* msg) {
  return *msg->_impl_.tasktable_;
}
TaskHud::TaskHud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mq.proto.taskhud.TaskHud)
}
TaskHud::TaskHud(const TaskHud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskHud* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tasktable_){nullptr}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tasktable()) {
    _this->_impl_.tasktable_ = new ::mq::proto::taskhud::TaskTable(*from._impl_.tasktable_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:mq.proto.taskhud.TaskHud)
}

inline void TaskHud::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tasktable_){nullptr}
    , decltype(_impl_.id_){0}
  };
}

TaskHud::~TaskHud() {
  // @@protoc_insertion_point(destructor:mq.proto.taskhud.TaskHud)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskHud::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tasktable_;
}

void TaskHud::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskHud::Clear() {
// @@protoc_insertion_point(message_clear_start:mq.proto.taskhud.TaskHud)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.tasktable_ != nullptr);
    _impl_.tasktable_->Clear();
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskHud::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mq.proto.taskhud.MessageId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::mq::proto::taskhud::MessageId>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .mq.proto.taskhud.TaskTable TaskTable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tasktable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskHud::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mq.proto.taskhud.TaskHud)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mq.proto.taskhud.MessageId id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .mq.proto.taskhud.TaskTable TaskTable = 2;
  if (_internal_has_tasktable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tasktable(this),
        _Internal::tasktable(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mq.proto.taskhud.TaskHud)
  return target;
}

size_t TaskHud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mq.proto.taskhud.TaskHud)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .mq.proto.taskhud.TaskTable TaskTable = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tasktable_);
  }

  // .mq.proto.taskhud.MessageId id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskHud::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskHud::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskHud::GetClassData() const { return &_class_data_; }


void TaskHud::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskHud*>(&to_msg);
  auto& from = static_cast<const TaskHud&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mq.proto.taskhud.TaskHud)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tasktable()) {
    _this->_internal_mutable_tasktable()->::mq::proto::taskhud::TaskTable::MergeFrom(
        from._internal_tasktable());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskHud::CopyFrom(const TaskHud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mq.proto.taskhud.TaskHud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskHud::IsInitialized() const {
  return true;
}

void TaskHud::InternalSwap(TaskHud* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskHud, _impl_.id_)
      + sizeof(TaskHud::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(TaskHud, _impl_.tasktable_)>(
          reinterpret_cast<char*>(&_impl_.tasktable_),
          reinterpret_cast<char*>(&other->_impl_.tasktable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskHud::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Taskhud_2eproto_getter, &descriptor_table_Taskhud_2eproto_once,
      file_level_metadata_Taskhud_2eproto[0]);
}

// ===================================================================

class Objective::_Internal {
 public:
};

Objective::Objective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mq.proto.taskhud.Objective)
}
Objective::Objective(const Objective& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Objective* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectivetext_){}
    , decltype(_impl_.iscompleted_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.objindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.objectivetext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objectivetext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_objectivetext().empty()) {
    _this->_impl_.objectivetext_.Set(from._internal_objectivetext(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.iscompleted_, &from._impl_.iscompleted_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.objindex_) -
    reinterpret_cast<char*>(&_impl_.iscompleted_)) + sizeof(_impl_.objindex_));
  // @@protoc_insertion_point(copy_constructor:mq.proto.taskhud.Objective)
}

inline void Objective::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectivetext_){}
    , decltype(_impl_.iscompleted_){false}
    , decltype(_impl_.progress_){0}
    , decltype(_impl_.objindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.objectivetext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objectivetext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Objective::~Objective() {
  // @@protoc_insertion_point(destructor:mq.proto.taskhud.Objective)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Objective::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objectivetext_.Destroy();
}

void Objective::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Objective::Clear() {
// @@protoc_insertion_point(message_clear_start:mq.proto.taskhud.Objective)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objectivetext_.ClearToEmpty();
  ::memset(&_impl_.iscompleted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.objindex_) -
      reinterpret_cast<char*>(&_impl_.iscompleted_)) + sizeof(_impl_.objindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Objective::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string objectiveText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_objectivetext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mq.proto.taskhud.Objective.objectiveText"));
        } else
          goto handle_unusual;
        continue;
      // bool isCompleted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.iscompleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.objindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Objective::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mq.proto.taskhud.Objective)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string objectiveText = 1;
  if (!this->_internal_objectivetext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objectivetext().data(), static_cast<int>(this->_internal_objectivetext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.proto.taskhud.Objective.objectiveText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_objectivetext(), target);
  }

  // bool isCompleted = 2;
  if (this->_internal_iscompleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_iscompleted(), target);
  }

  // int32 progress = 3;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_progress(), target);
  }

  // int32 objIndex = 4;
  if (this->_internal_objindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_objindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mq.proto.taskhud.Objective)
  return target;
}

size_t Objective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mq.proto.taskhud.Objective)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string objectiveText = 1;
  if (!this->_internal_objectivetext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objectivetext());
  }

  // bool isCompleted = 2;
  if (this->_internal_iscompleted() != 0) {
    total_size += 1 + 1;
  }

  // int32 progress = 3;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
  }

  // int32 objIndex = 4;
  if (this->_internal_objindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Objective::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Objective::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Objective::GetClassData() const { return &_class_data_; }


void Objective::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Objective*>(&to_msg);
  auto& from = static_cast<const Objective&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mq.proto.taskhud.Objective)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_objectivetext().empty()) {
    _this->_internal_set_objectivetext(from._internal_objectivetext());
  }
  if (from._internal_iscompleted() != 0) {
    _this->_internal_set_iscompleted(from._internal_iscompleted());
  }
  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_objindex() != 0) {
    _this->_internal_set_objindex(from._internal_objindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Objective::CopyFrom(const Objective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mq.proto.taskhud.Objective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Objective::IsInitialized() const {
  return true;
}

void Objective::InternalSwap(Objective* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.objectivetext_, lhs_arena,
      &other->_impl_.objectivetext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Objective, _impl_.objindex_)
      + sizeof(Objective::_impl_.objindex_)
      - PROTOBUF_FIELD_OFFSET(Objective, _impl_.iscompleted_)>(
          reinterpret_cast<char*>(&_impl_.iscompleted_),
          reinterpret_cast<char*>(&other->_impl_.iscompleted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Objective::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Taskhud_2eproto_getter, &descriptor_table_Taskhud_2eproto_once,
      file_level_metadata_Taskhud_2eproto[1]);
}

// ===================================================================

class Task::_Internal {
 public:
};

Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mq.proto.taskhud.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Task* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectives_){from._impl_.objectives_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mq.proto.taskhud.Task)
}

inline void Task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectives_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:mq.proto.taskhud.Task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objectives_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:mq.proto.taskhud.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objectives_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mq.proto.taskhud.Task.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .mq.proto.taskhud.Objective objectives = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objectives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mq.proto.taskhud.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.proto.taskhud.Task.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .mq.proto.taskhud.Objective objectives = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objectives_size()); i < n; i++) {
    const auto& repfield = this->_internal_objectives(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mq.proto.taskhud.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mq.proto.taskhud.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mq.proto.taskhud.Objective objectives = 2;
  total_size += 1UL * this->_internal_objectives_size();
  for (const auto& msg : this->_impl_.objectives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }


void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Task*>(&to_msg);
  auto& from = static_cast<const Task&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mq.proto.taskhud.Task)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objectives_.MergeFrom(from._impl_.objectives_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mq.proto.taskhud.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objectives_.InternalSwap(&other->_impl_.objectives_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Taskhud_2eproto_getter, &descriptor_table_Taskhud_2eproto_once,
      file_level_metadata_Taskhud_2eproto[2]);
}

// ===================================================================

class TaskTable::_Internal {
 public:
};

TaskTable::TaskTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mq.proto.taskhud.TaskTable)
}
TaskTable::TaskTable(const TaskTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , decltype(_impl_.character_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_character().empty()) {
    _this->_impl_.character_.Set(from._internal_character(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mq.proto.taskhud.TaskTable)
}

inline void TaskTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , decltype(_impl_.character_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskTable::~TaskTable() {
  // @@protoc_insertion_point(destructor:mq.proto.taskhud.TaskTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
  _impl_.character_.Destroy();
}

void TaskTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskTable::Clear() {
// @@protoc_insertion_point(message_clear_start:mq.proto.taskhud.TaskTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _impl_.character_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_character();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mq.proto.taskhud.TaskTable.character"));
        } else
          goto handle_unusual;
        continue;
      // repeated .mq.proto.taskhud.Task tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mq.proto.taskhud.TaskTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string character = 1;
  if (!this->_internal_character().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_character().data(), static_cast<int>(this->_internal_character().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.proto.taskhud.TaskTable.character");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_character(), target);
  }

  // repeated .mq.proto.taskhud.Task tasks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mq.proto.taskhud.TaskTable)
  return target;
}

size_t TaskTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mq.proto.taskhud.TaskTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mq.proto.taskhud.Task tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string character = 1;
  if (!this->_internal_character().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_character());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskTable::GetClassData() const { return &_class_data_; }


void TaskTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskTable*>(&to_msg);
  auto& from = static_cast<const TaskTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mq.proto.taskhud.TaskTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (!from._internal_character().empty()) {
    _this->_internal_set_character(from._internal_character());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskTable::CopyFrom(const TaskTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mq.proto.taskhud.TaskTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskTable::IsInitialized() const {
  return true;
}

void TaskTable::InternalSwap(TaskTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.character_, lhs_arena,
      &other->_impl_.character_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Taskhud_2eproto_getter, &descriptor_table_Taskhud_2eproto_once,
      file_level_metadata_Taskhud_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace taskhud
}  // namespace proto
}  // namespace mq
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mq::proto::taskhud::TaskHud*
Arena::CreateMaybeMessage< ::mq::proto::taskhud::TaskHud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mq::proto::taskhud::TaskHud >(arena);
}
template<> PROTOBUF_NOINLINE ::mq::proto::taskhud::Objective*
Arena::CreateMaybeMessage< ::mq::proto::taskhud::Objective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mq::proto::taskhud::Objective >(arena);
}
template<> PROTOBUF_NOINLINE ::mq::proto::taskhud::Task*
Arena::CreateMaybeMessage< ::mq::proto::taskhud::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mq::proto::taskhud::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::mq::proto::taskhud::TaskTable*
Arena::CreateMaybeMessage< ::mq::proto::taskhud::TaskTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mq::proto::taskhud::TaskTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
